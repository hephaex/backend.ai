# Default values for backend-ai-app-proxy
# This is a YAML-formatted file.

# Global settings
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Common settings
nameOverride: ""
fullnameOverride: ""

# Coordinator configuration
coordinator:
  enabled: true
  replicaCount: 1
  
  # Image settings
  image:
    registry: ghcr.io
    repository: lablup/backend.ai-app-proxy-coordinator
    tag: "23.09"
    pullPolicy: IfNotPresent
    pullSecrets: []
  
  # Service configuration
  service:
    type: ClusterIP
    port: 10200
    targetPort: 10200
    annotations: {}
  
  # Resource limits and requests
  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 250m
      memory: 512Mi
  
  # Configuration
  config:
    debug: false
    host: "0.0.0.0"
    port: 10200
    
    # Manager connection
    manager:
      endpoint: "http://backend-ai-manager:8080"
      user: "admin@lablup.com"
      password: "wJalrXUt"
    
    # Database configuration
    database:
      host: "backend-ai-app-proxy-postgresql"
      port: 5432
      name: "backend_ai_appproxy"
      user: "postgres"
      password: ""
    
    # Redis configuration
    redis:
      host: "backend-ai-app-proxy-redis-master"
      port: 6379
      password: ""
      db: 0
    
    # ETCD configuration
    etcd:
      endpoints:
        - "backend-ai-app-proxy-etcd:2379"
      namespace: "local"
    
    # Worker settings
    worker:
      count: 2
      timeout: 300

# Worker configuration
worker:
  enabled: true
  replicaCount: 2
  
  # Image settings
  image:
    registry: ghcr.io
    repository: lablup/backend.ai-app-proxy-worker
    tag: "23.09"
    pullPolicy: IfNotPresent
    pullSecrets: []
  
  # Service configuration
  service:
    type: ClusterIP
    port: 10201
    targetPort: 10201
    annotations: {}
  
  # Resource limits and requests
  resources:
    limits:
      cpu: 2000m
      memory: 4Gi
    requests:
      cpu: 500m
      memory: 1Gi
  
  # Configuration
  config:
    debug: false
    host: "0.0.0.0"
    port: 10201
    
    # Coordinator connection
    coordinator:
      endpoint: "http://backend-ai-app-proxy-coordinator:10200"
    
    # Manager connection
    manager:
      endpoint: "http://backend-ai-manager:8080"
      user: "admin@lablup.com"
      password: "wJalrXUt"
    
    # Redis configuration
    redis:
      host: "backend-ai-app-proxy-redis-master"
      port: 6379
      password: ""
      db: 0
    
    # ETCD configuration
    etcd:
      endpoints:
        - "backend-ai-app-proxy-etcd:2379"
      namespace: "local"
    
    # Worker settings
    worker:
      id: "worker-{}"
      timeout: 300
      max_concurrent_sessions: 100

# Service account
serviceAccount:
  create: true
  annotations: {}
  name: ""
  automount: true

# Pod annotations and labels
podAnnotations: {}
podLabels: {}

# Security context
podSecurityContext:
  fsGroup: 2000

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

# Ingress configuration
ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: app-proxy.backend.ai
      paths:
        - path: /
          pathType: Prefix
  tls: []

# Autoscaling
autoscaling:
  coordinator:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
  
  worker:
    enabled: false
    minReplicas: 2
    maxReplicas: 20
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

# Node selection and scheduling
nodeSelector: {}
tolerations: []
affinity: {}

# Persistence
persistence:
  enabled: true
  storageClass: ""
  accessMode: ReadWriteOnce
  size: 10Gi
  mountPath: /home/backend.ai/logs
  subPath: ""
  annotations: {}

# Liveness and readiness probes
livenessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10

readinessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 5
  periodSeconds: 5

# Environment variables
env: {}
envFrom: []

# Init containers
initContainers: []

# Sidecar containers
sidecars: []

# Pod Disruption Budget
podDisruptionBudget:
  enabled: false
  minAvailable: 1

# Network Policy
networkPolicy:
  enabled: false
  ingress: []
  egress: []

# Monitoring
monitoring:
  enabled: false
  serviceMonitor:
    enabled: false
    interval: 30s
    scrapeTimeout: 10s
    labels: {}
    annotations: {}

# Logging
logging:
  level: "INFO"
  format: "console"

# Dependencies
postgresql:
  enabled: true
  auth:
    postgresPassword: ""
    username: "postgres"
    password: ""
    database: "backend_ai_appproxy"
  primary:
    persistence:
      enabled: true
      size: 8Gi

redis:
  enabled: true
  auth:
    enabled: false
    password: ""
  master:
    persistence:
      enabled: true
      size: 8Gi

etcd:
  enabled: true
  auth:
    rbac:
      create: false
  persistence:
    enabled: true
    size: 8Gi